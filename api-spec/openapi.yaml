openapi: "3.0.3"
info:
  title: PollPal API
  description: Updated API documentation for the PollPal Recommendation Application. Based on current Flask implementation.
  version: "1.0.1"
servers:
  - url: http://api.pollpal.com
  - url: http://localhost:5001
tags:
  - name: Authentication
    description: Endpoints related to user registration, login, logout, and current user data.
  - name: Profile
    description: Endpoints to update user profile data.
  - name: Places
    description: Endpoints for place recommendations, liking/disliking places, and sample place data.
paths:
  /:
    get:
      summary: Home Page
      description: Welcome message to verify the API is running.
      responses:
        '200':
          description: Welcome message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Welcome to PollPal Backend"

  /api/db-test:
    get:
      summary: Database Connection Test
      description: Tests the connection to MongoDB and returns available collections.
      responses:
        '200':
          description: Connection successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  collections:
                    type: array
                    items:
                      type: string
              example:
                status: "success"
                message: "Connected to MongoDB!"
                collections: ["users", "places"]
        '500':
          description: Connection error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Failed to connect to MongoDB: <error details>"

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: User Registration
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                date_of_birth:
                  type: string
                  format: date
                phone_number:
                  type: string
                preferences:
                  type: array
                  items:
                    type: string
                location:
                  type: string
              required:
                - username
                - email
                - password
            example:
              username: "john_doe"
              email: "john@example.com"
              password: "securepassword"
              date_of_birth: "1990-01-01"
              phone_number: "555-123-4567"
              preferences: ["Food", "Music", "Art"]
              location: "Cleveland"
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserResponse"
              example:
                status: "success"
                message: "User registered successfully"
                user:
                  id: "648a9d1a0c5d7b2a1e3f4g5h"
                  username: "john_doe"
                  email: "john@example.com"
                  preferences: ["Food", "Music", "Art"]
                  location: "Cleveland"
                  liked_places: []
                  disliked_places: []
                  date_of_birth: "1990-01-01"
                  phone_number: "555-123-4567"
        '400':
          description: Registration error (missing fields or validation error).
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Missing required fields"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Registration failed: <error details>"

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user and create a session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            example:
              username: "john_doe"
              password: "securepassword"
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserResponse"
              example:
                status: "success"
                message: "Login successful"
                user:
                  id: "648a9d1a0c5d7b2a1e3f4g5h"
                  username: "john_doe"
                  email: "john@example.com"
                  preferences: ["Food", "Music", "Art"]
                  location: "Cleveland"
                  liked_places: []
                  disliked_places: []
                  date_of_birth: "1990-01-01"
                  phone_number: "555-123-4567"
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Invalid username or password"
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Username and password are required"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Login failed: <error details>"

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: End user session.
      responses:
        '200':
          description: Logged out successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "success"
                message: "Logged out successfully"

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get Current User
      description: Retrieve the current authenticated user's information.
      responses:
        '200':
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserResponse"
              example:
                status: "success"
                user:
                  id: "648a9d1a0c5d7b2a1e3f4g5h"
                  username: "john_doe"
                  email: "john@example.com"
                  preferences: ["Food", "Music", "Art"]
                  location: "Cleveland"
                  liked_places: []
                  disliked_places: []
                  date_of_birth: "1990-01-01"
                  phone_number: "555-123-4567"
        '401':
          description: User not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Not authenticated"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Error retrieving user data: <error details>"

  /api/user/update:
    put:
      tags:
        - Profile
      summary: Update User Information
      description: Update current user's profile information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                date_of_birth:
                  type: string
                  format: date
                phone_number:
                  type: string
                preferences:
                  type: array
                  items:
                    type: string
                location:
                  type: string
            example:
              username: "john_updated"
              email: "john_updated@example.com"
              preferences: ["Food", "Music", "Art", "Sports"]
              location: "Columbus"
      responses:
        '200':
          description: User information updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserResponse"
              example:
                status: "success"
                message: "User information updated successfully"
                user:
                  id: "648a9d1a0c5d7b2a1e3f4g5h"
                  username: "john_updated"
                  email: "john_updated@example.com"
                  preferences: ["Food", "Music", "Art", "Sports"]
                  location: "Columbus"
                  liked_places: []
                  disliked_places: []
                  date_of_birth: "1990-01-01"
                  phone_number: "555-123-4567"
        '401':
          description: User not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Not authenticated"
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Failed to update user information"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Error updating user information: <error details>"

  /api/user/places/like/{place_id}:
    post:
      tags:
        - Places
      summary: Like a Place
      description: Add a place to the user's liked places list.
      parameters:
        - in: path
          name: place_id
          required: true
          schema:
            type: string
          description: The ID of the place to like.
      responses:
        '200':
          description: Place added to liked places successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "success"
                message: "Place added to liked places"
        '401':
          description: User not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Not authenticated"
        '400':
          description: Invalid place ID or already liked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Failed to like place"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Error liking place: <error details>"

  /api/user/places/dislike/{place_id}:
    post:
      tags:
        - Places
      summary: Dislike a Place
      description: Add a place to the user's disliked places list.
      parameters:
        - in: path
          name: place_id
          required: true
          schema:
            type: string
          description: The ID of the place to dislike.
      responses:
        '200':
          description: Place added to disliked places successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "success"
                message: "Place added to disliked places"
        '401':
          description: User not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Not authenticated"
        '400':
          description: Invalid place ID or already disliked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Failed to dislike place"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Error disliking place: <error details>"

  /api/user/places/reset/{place_id}:
    post:
      tags:
        - Places
      summary: Reset Place Status
      description: Remove a place from both liked and disliked places lists.
      parameters:
        - in: path
          name: place_id
          required: true
          schema:
            type: string
          description: The ID of the place to reset.
      responses:
        '200':
          description: Place reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "success"
                message: "Place removed from liked/disliked places"
        '401':
          description: User not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Not authenticated"
        '400':
          description: Invalid place ID or not in lists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Failed to reset place status"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Error resetting place status: <error details>"

  /places:
    get:
      tags:
        - Places
      summary: Get Sample Places
      description: Retrieve a list of sample places for testing purposes.
      responses:
        '200':
          description: List of sample places.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlaceSample"
              example:
                - name: "Rock & Roll Hall of Fame"
                  description: "A museum dedicated to preserving the history of rock music."
                  image: "https://example.com/rock-hall.jpg"
                - name: "West Side Market"
                  description: "Historic public market with fresh produce and artisanal foods."
                  image: "https://example.com/west-side-market.jpg"

  /api/match:
    get:
      tags:
        - Places
      summary: Get Matched Places
      description: Get personalized place recommendations based on user preferences and past interactions.
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter recommendations by category.
      responses:
        '200':
          description: Matched places retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  matches:
                    type: array
                    items:
                      type: object
              example:
                status: "success"
                matches: [
                  {
                    "id": "place1",
                    "name": "Rock & Roll Hall of Fame",
                    "score": 0.95,
                    "category": "Music"
                  }
                ]
        '401':
          description: User not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Not authenticated"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: "error"
                message: "Failed to calculate matches: <error details>"

components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        preferences:
          type: array
          items:
            type: string
        location:
          type: string
        liked_places:
          type: array
          items:
            type: string
        disliked_places:
          type: array
          items:
            type: string
        date_of_birth:
          type: string
          format: date
        phone_number:
          type: string
    
    PlaceSample:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string